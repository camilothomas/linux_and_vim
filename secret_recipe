Verbs

d -> delete
c -> change
y -> yank (copy)
v -> visually select (V for line vs. character)

Modifiers are used before nouns to describe the way in which you're going to do
something

i -> inside
a -> around
NUM -> number (e.g.: 1, 2, 10)
t -> searches for something and stops before it
f -> searches for that thing and lands on it
/ -> find a string (literal or regex)

Nouns

w -> word
s -> sentence
) -> sentence (another way of doing it)
p -> paragraph
} -> paragraph (another way of doing it)
< -> tag (think HTML/XML)
b -> block (think programming)

Building sentences (commands) using this language

d2w <- delete two words

cis <- change inside sentence (delete the current one and enter insert mode)

yip <- yank inside paragraph (copy the paragraph you're in)

ct< <- change to open bracket (change the text from where you are to the next
open bracket)

Working with your file

:saveas ~/foo/bar/jay_dilla

ZZ <- while :wq works I tend to use ZZ which doesn't require the ":" and just
seems faster to me.  You can also use :x

Searching your text

/ <- search ? can be used to search backwards

Brutally cool, can search for and jump to specific characters

f< <- jump forward and land on the < character

t< <- jump forward and land right before the < character

you can think of this as "find" for the first one and to for the second one
which lands right before it

some of my own examples:

let a = function() {
you can think of this as "find" for the first one and to for the second one
which lands right before it

some of my own examples:

let a = function() {

you can think of this as "find" for the first one and to for the second one
which lands right before it

some of my own examples:

let a = function() {

you can think of this as "find" for the first one and to for the second one
which lands right before it

some of my own examples:

let a = function() {

you can think of this as "find" for the first one and to for the second one
which lands right before it

some of my own examples:

let a = function(my_var) { <- f( l ct) <- three commands to change the var list
//abc
//def
//ghi
abcdefghi} <- ct}

a serve a octopus a shrimp a iced a dry

, and ; can be used to go forward and back for t and f 

A search reference

/{string} <- search for string
t <- jump up to a character
f <- jump onto a character
* search for other instances of the word under your cursor
n <- go to the next instance when you've searched for a string
N <- go to the previous instance when you've searched for a string
; <- go to the next instance when you've jumped to a character

Moving around in your text
    j
    ^
h <   > l
    v
    k

0 -> (zero) move to the beginning of the line.
$ -> move to the end of the line.
^ -> move to the first non blank character in the line
t" -> jump to land right before the next quotes
f" -> jump right onto the next quotes

by word

w -> move forward one word
b -> move backward one word
e -> move to the end of your word

when you use uppercase you ignore some delimiters within a string that may
break it into two words

W -> move forward one big word (jumps over you've for example)
B -> move back one big word (can jump over (zero) for example)

) -> move forward one sentence (indicated by '.')
} -> move forward one paragraph

Moving within the screen

H -> move to the top of the screen
M -> move to the middle of the screen
L -> move to the bottom of the screen
gg -> go to the top of the file
G -> go to the bottom of the file

Using the control key (?) ^? 

^U -> move up half a screen 
^D -> move down half a screen
^F -> page down
^B -> page up

While in normal mode it's possible to jumb back and forth between two places

CTRL-i -> jump to your previous navigation location
CTRL-o -> jump back to where you were

Other motions

:line_number -> move to a line number

change(c) insert(i) or append(a)

i -> insert before the cursor
a -> append after the cursor
I -> insert at the beginning of the line
A -> append at the end of the line
o -> open a new line below the current one
O -> open a new line above the current one
r -> replace the one character under your cursor
R -> replace the character under your cursor but just keep typing afterwards

cm -> change whatever you define as a movement
ct? -> change up to the question mark?
s -> substitute from where you are to the next command (noun)
S -> substitute the entire current line

~ -> change case w/ tilde COMMAND
